// 1. List all of the Bugs that your Users created.
db.Bugs.find({ authorOfBug: ObjectId(Number/UserId/UserId) })

// 2. List all of the Bugs that you are assigned to.
db.Bugs.find({ assignedTo: ObjectId(Number/UserId) })

// 3. List all of the Bugs that you created or are assigned to.
db.Bugs.find({ $or: [ { authorOfBug: ObjectId(Number/UserId) }, { assignedTo: ObjectId(Number/UserId) } ] })

// 4. List all of the Bugs that are unclassified. If the field is null or empty/"" it will return nothing, its looking for a documentation without a classification:
db.Bugs.find({ classification: { $exists: false } })

// 5. List all of the Bugs that have been approved by a Business Analyst, but are not closed.
db.Bugs.find({ approvedByBA: true, status: { $ne: "closed" } })

// 6. List all of the Bugs that are fixed, but are not closed.
db.Bugs.find({ status: "fixed", status: { $ne: "closed" } })

// 7. List all of the Bugs that do not have steps to reproduce.
    db.Bugs.find({ stepsToReproduce: { $exists: false } })

// 8. List all of the Bugs that do not have test cases.
db.Bugs.find({ testCases: { $exists: false } })

// 9. List all of the Bugs that do not have hours/work/labor recorded.
db.Bugs.find({ hours: { $exists: false }, work: { $exists: false }, labor: { $exists: false } })


// 10. List all Bugs, with the number of comments for each bug. (Include Bugs with no comments)
db.Bugs.aggregate([
    {
        $project:{count:{$size:"$comments"}}}])

// 11. List all Bugs, with the total number of hours worked on each bug. (Include Bugs with no recorded hours)
db.Bugs.aggregate([
	{
		$addFields: {
			totalHours: { $ifNull: ["$hours", 0] }
		}
	}
])

// 12. List all of the Bugs with failing test cases. (Do not list the same bug multiple times!)
db.Bugs.find({ "testCases.status": "fail" })
